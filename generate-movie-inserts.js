// ÎÑ§Ïù¥Î≤Ñ ÌÅ¨Î°§ÎßÅÏúºÎ°ú ÏòÅÌôî Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÌõÑ SQL INSERTÎ¨∏ ÏÉùÏÑ±
const axios = require('axios');
const fs = require('fs');
const path = require('path');

class MovieInsertGenerator {
    constructor() {
        this.clientId = process.env.NAVER_CLIENT_ID;
        this.clientSecret = process.env.NAVER_CLIENT_SECRET;
        
        // Ïù∏Í∏∞ ÏòÅÌôî Î¶¨Ïä§Ìä∏ - ÌïúÍµ≠/Ìï¥Ïô∏ ÏòÅÌôî Ìè¨Ìï®
        this.movieList = [
            // ÌïúÍµ≠ ÏòÅÌôî
            'Í∏∞ÏÉùÏ∂©', 'ÎØ∏ÎÇòÎ¶¨', 'Î≤ÑÎãù', 'ÏïÑÍ∞ÄÏî®', 'Í≥°ÏÑ±', 'Î∂ÄÏÇ∞Ìñâ', 'Î≤îÏ£ÑÎèÑÏãú', 'Í∑πÌïúÏßÅÏóÖ',
            'Î™ÖÎüâ', 'Íµ≠Ï†úÏãúÏû•', 'Î≤†ÌÖåÎûë', 'ÏïîÏÇ¥', 'ÎèÑÎëëÎì§', 'Í¥ëÌï¥', 'ÏôïÏùò ÎÇ®Ïûê', 'Ïã§ÎØ∏ÎèÑ',
            'ÌÉúÍ∑πÍ∏∞ ÌúòÎÇ†Î¶¨Î©∞', 'ÏπúÍµ¨', 'Ïò¨ÎìúÎ≥¥Ïù¥', 'ÏÇ¥Ïù∏Ïùò Ï∂îÏñµ', 'Í¥¥Î¨º', 'Ï∂îÍ≤©Ïûê', 'Ìô©Ìï¥',
            'ÏïÑÏ†ÄÏî®', 'ÎßàÎçî', 'Î∞ïÏ•ê', 'ÎÇ¥Î∂ÄÏûêÎì§', 'Î∞ÄÏ†ï', 'Í¥ÄÏÉÅ', 'Ïã†Í≥ºÌï®Íªò', 'ÌÉùÏãúÏö¥Ï†ÑÏÇ¨',
            '1987', 'Í≥µÏûë', 'ÎßàÏïΩÏôï', 'Í∑πÏû•Ìåê Í∑ÄÎ©∏Ïùò ÏπºÎÇ†', 'Î™®Í∞ÄÎîîÏäà', 'ÏäπÎ¶¨Ìò∏', 'ÏÇ¨ÎÉ•Ïùò ÏãúÍ∞Ñ',
            
            // Ìï¥Ïô∏ ÏòÅÌôî  
            'Ïñ¥Î≤§Ï†∏Ïä§', 'ÏïÑÏù¥Ïñ∏Îß®', 'Ïä§ÌååÏù¥ÎçîÎß®', 'Î∞∞Ìä∏Îß®', 'Ï°∞Ïª§', 'Ïù∏ÌÑ∞Ïä§ÌÖîÎùº', 'Ïù∏ÏÖâÏÖò',
            'ÌÉÄÏù¥ÌÉÄÎãâ', 'ÏïÑÎ∞îÌÉÄ', 'Ïä§ÌÉÄÏõåÏ¶à', 'Ìï¥Î¶¨Ìè¨ÌÑ∞', 'Î∞òÏßÄÏùò Ï†úÏôï', 'Îã§ÌÅ¨ ÎÇòÏù¥Ìä∏',
            'Í≤®Ïö∏ÏôïÍµ≠', 'ÌÜ†Ïù¥ Ïä§ÌÜ†Î¶¨', 'ÎùºÏù¥Ïò® ÌÇπ', 'ÎØ∏ÎÖÄÏôÄ ÏïºÏàò', 'ÏïåÎùºÎîò', 'Î™®ÏïÑÎÇò',
            'ÌÉëÍ±¥ Îß§Î≤ÑÎ¶≠', 'ÎØ∏ÏÖò ÏûÑÌååÏÑúÎ∏î', 'Î∂ÑÎÖ∏Ïùò ÏßàÏ£º', 'Ìä∏ÎûúÏä§Ìè¨Î®∏', 'Ï•¨ÎùºÍ∏∞ Í≥µÏõê',
            'ÎùºÎùºÎûúÎìú', 'Ï°∞Ï°∞ ÎûòÎπó', 'ÏõêÏä§ Ïñ¥Ìè∞ Ïñ¥ ÌÉÄÏûÑ Ïù∏ Ìï†Î¶¨Ïö∞Îìú', '1917', 'Ìè¨Îìú v ÌéòÎùºÎ¶¨',
            'Î∏îÎûôÌå¨ÏÑú', 'Ï∫°Ìã¥ ÎßàÎ∏î', 'ÌÜ†Î•¥', 'Îã•ÌÑ∞ Ïä§Ìä∏Î†àÏù∏ÏßÄ', 'Í∞ÄÎîîÏñ∏Ï¶à Ïò§Î∏å Í∞§Îü≠Ïãú',
            'Îç∞ÎìúÌíÄ', 'Ïö∏Î≤ÑÎ¶∞', 'X-Î©ò', 'ÌåêÌÉÄÏä§Ìã± ÎπÑÏä§Ìä∏', 'ÏõêÎçîÏö∞Î®º', 'ÏïÑÏø†ÏïÑÎß®',
            'ÏÉ§Ïû†', 'ÌîåÎûòÏãú', 'ÏäàÌçºÎß®', 'Îß§Ìä∏Î¶≠Ïä§', 'ÌÑ∞ÎØ∏ÎÑ§Ïù¥ÌÑ∞', 'ÏóêÏùºÎ¶¨Ïñ∏', 'ÌîÑÎ†àÎç∞ÌÑ∞'
        ];
        
        this.sqlInserts = [];
        this.results = {
            totalProcessed: 0,
            successCount: 0,
            errorCount: 0,
            errors: []
        };
    }

    async generateMovieInserts() {
        console.log('üé¨ ÎÑ§Ïù¥Î≤Ñ APIÎ°ú ÏòÅÌôî Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Î∞è INSERTÎ¨∏ ÏÉùÏÑ± ÏãúÏûë\n');
        console.log(`üìä ÎåÄÏÉÅ ÏòÅÌôî: ${this.movieList.length}Í∞ú`);
        
        if (!this.clientId || !this.clientSecret) {
            console.log('‚ùå ÎÑ§Ïù¥Î≤Ñ API ÌÇ§Í∞Ä ÏóÜÏñ¥ÏÑú ÏÉòÌîå Îç∞Ïù¥ÌÑ∞Î°ú ÏßÑÌñâÌï©ÎãàÎã§.');
            return this.generateSampleInserts();
        }

        const startTime = Date.now();

        for (const movieTitle of this.movieList) {
            try {
                console.log(`üîç "${movieTitle}" Í≤ÄÏÉâ Ï§ë...`);
                
                const movieData = await this.searchNaverMovie(movieTitle);
                
                if (movieData) {
                    const insertSQL = this.generateInsertSQL(movieData);
                    this.sqlInserts.push(insertSQL);
                    
                    console.log(`‚úÖ "${movieData.title}" SQL ÏÉùÏÑ± ÏôÑÎ£å`);
                    this.results.successCount++;
                } else {
                    console.log(`‚ö†Ô∏è "${movieTitle}" Í≤ÄÏÉâ Í≤∞Í≥º ÏóÜÏùå`);
                    this.results.errorCount++;
                    this.results.errors.push(`${movieTitle}: Í≤ÄÏÉâ Í≤∞Í≥º ÏóÜÏùå`);
                }
                
                this.results.totalProcessed++;
                
                // API Ï†úÌïú Ï§ÄÏàò (Ï¥àÎãπ 10Ìöå)
                await new Promise(resolve => setTimeout(resolve, 120));
                
            } catch (error) {
                console.error(`‚ùå "${movieTitle}" Ï≤òÎ¶¨ Ïò§Î•ò:`, error.message);
                this.results.errorCount++;
                this.results.errors.push(`${movieTitle}: ${error.message}`);
                this.results.totalProcessed++;
            }
        }

        const duration = Math.round((Date.now() - startTime) / 1000);
        
        console.log('\nüéâ ÏòÅÌôî Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏôÑÎ£å!');
        console.log(`üìä Ï¥ù Ï≤òÎ¶¨: ${this.results.totalProcessed}Í∞ú`);
        console.log(`‚úÖ ÏÑ±Í≥µ: ${this.results.successCount}Í∞ú`);
        console.log(`‚ùå Ïã§Ìå®: ${this.results.errorCount}Í∞ú`);
        console.log(`‚è±Ô∏è ÏÜåÏöîÏãúÍ∞Ñ: ${duration}Ï¥à`);

        // SQL ÌååÏùº ÏÉùÏÑ±
        await this.generateSQLFile();
        
        return {
            success: true,
            totalInserts: this.sqlInserts.length,
            results: this.results
        };
    }

    async searchNaverMovie(title) {
        try {
            const response = await axios.get('https://openapi.naver.com/v1/search/movie.json', {
                params: {
                    query: title,
                    display: 1,
                    start: 1
                },
                headers: {
                    'X-Naver-Client-Id': this.clientId,
                    'X-Naver-Client-Secret': this.clientSecret
                },
                timeout: 10000
            });

            if (response.data.items && response.data.items.length > 0) {
                return this.processMovieData(response.data.items[0]);
            }

            return null;

        } catch (error) {
            console.error(`ÎÑ§Ïù¥Î≤Ñ Í≤ÄÏÉâ Ïò§Î•ò (${title}):`, error.message);
            return null;
        }
    }

    processMovieData(item) {
        // HTML ÌÉúÍ∑∏ Ï†úÍ±∞ Î∞è Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨
        const cleanTitle = item.title.replace(/<\/?[^>]+(>|$)/g, '').trim();
        const cleanDirector = item.director ? item.director.replace(/\|/g, ', ').replace(/,$/, '').trim() : '';
        const cleanActor = item.actor ? item.actor.replace(/\|/g, ', ').replace(/,$/, '').trim() : '';
        
        // Ïû•Î•¥ Ï∂îÏ†ï (Ï†úÎ™©Ïù¥ÎÇò ÏÑ§Î™Ö Í∏∞Î∞ò)
        let genre = this.estimateGenre(cleanTitle, cleanDirector);

        return {
            title: cleanTitle,
            title_english: this.extractEnglishTitle(item.title),
            director: cleanDirector || null,
            cast: cleanActor || null,
            genre: genre,
            release_year: item.pubDate ? parseInt(item.pubDate) : null,
            release_date: null,
            running_time: null,
            rating: null,
            country: this.estimateCountry(cleanTitle, cleanDirector),
            production_company: null,
            plot_summary: this.generatePlotSummary(cleanTitle, cleanDirector, cleanActor),
            poster_image: item.image || null,
            naver_rating: item.userRating ? parseFloat(item.userRating) : null,
            critic_score: null,
            audience_score: item.userRating ? parseFloat(item.userRating) : null,
            data_source: 'naver_api',
            naver_link: item.link || null,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        };
    }

    estimateGenre(title, director) {
        const actionKeywords = ['Ïñ¥Î≤§Ï†∏Ïä§', 'ÏïÑÏù¥Ïñ∏Îß®', 'Î∞∞Ìä∏Îß®', 'Ïä§ÌååÏù¥ÎçîÎß®', 'ÎØ∏ÏÖò', 'Î∂ÑÎÖ∏', 'Ìä∏ÎûúÏä§Ìè¨Î®∏'];
        const dramaKeywords = ['Í∏∞ÏÉùÏ∂©', 'ÎØ∏ÎÇòÎ¶¨', 'ÎùºÎùºÎûúÎìú', 'ÌÉÄÏù¥ÌÉÄÎãâ', 'ÏπúÍµ¨'];
        const comedyKeywords = ['Í∑πÌïúÏßÅÏóÖ', 'Î≤†ÌÖåÎûë', 'Í¥ëÌï¥'];
        const thrillerKeywords = ['Í≥°ÏÑ±', 'Ï∂îÍ≤©Ïûê', 'Ìô©Ìï¥', 'Ï°∞Ïª§', 'Îã§ÌÅ¨ ÎÇòÏù¥Ìä∏'];
        const animationKeywords = ['Í≤®Ïö∏ÏôïÍµ≠', 'ÌÜ†Ïù¥ Ïä§ÌÜ†Î¶¨', 'ÎùºÏù¥Ïò® ÌÇπ'];
        const horrorKeywords = ['Î∂ÄÏÇ∞Ìñâ', 'Í≥°ÏÑ±'];
        const romanceKeywords = ['ÎùºÎùºÎûúÎìú', 'ÌÉÄÏù¥ÌÉÄÎãâ'];

        if (actionKeywords.some(keyword => title.includes(keyword))) return 'Ïï°ÏÖò';
        if (thrillerKeywords.some(keyword => title.includes(keyword))) return 'Ïä§Î¶¥Îü¨';
        if (comedyKeywords.some(keyword => title.includes(keyword))) return 'ÏΩîÎØ∏Îîî';
        if (animationKeywords.some(keyword => title.includes(keyword))) return 'Ïï†ÎãàÎ©îÏù¥ÏÖò';
        if (horrorKeywords.some(keyword => title.includes(keyword))) return 'Í≥µÌè¨';
        if (romanceKeywords.some(keyword => title.includes(keyword))) return 'Î°úÎß®Ïä§';
        if (dramaKeywords.some(keyword => title.includes(keyword))) return 'ÎìúÎùºÎßà';
        
        return 'ÎìúÎùºÎßà'; // Í∏∞Î≥∏Í∞í
    }

    estimateCountry(title, director) {
        const koreanNames = ['Î¥âÏ§ÄÌò∏', 'Î∞ïÏ∞¨Ïö±', 'ÍπÄÍ∏∞Îçï', 'Ïù¥Ï∞ΩÎèô', 'ÌôçÏÉÅÏàò', 'ÏûÑÍ∂åÌÉù'];
        const koreanMovies = ['Í∏∞ÏÉùÏ∂©', 'ÎØ∏ÎÇòÎ¶¨', 'Î≤ÑÎãù', 'Î∂ÄÏÇ∞Ìñâ', 'Î≤îÏ£ÑÎèÑÏãú', 'Í∑πÌïúÏßÅÏóÖ', 'Î™ÖÎüâ'];
        
        if (koreanMovies.some(movie => title.includes(movie)) || 
            koreanNames.some(name => director && director.includes(name))) {
            return 'ÌïúÍµ≠';
        }
        
        return 'ÎØ∏Íµ≠'; // Í∏∞Î≥∏Í∞í
    }

    extractEnglishTitle(htmlTitle) {
        // HTMLÏóêÏÑú ÏòÅÏñ¥ Ï†úÎ™© Ï∂îÏ∂ú ÏãúÎèÑ
        const match = htmlTitle.match(/\(([A-Za-z0-9\s:]+)\)/);
        return match ? match[1] : null;
    }

    generatePlotSummary(title, director, cast) {
        let summary = `${title}`;
        
        if (director) {
            summary += ` - Í∞êÎèÖ: ${director}`;
        }
        
        if (cast) {
            const mainCast = cast.split(', ').slice(0, 3).join(', ');
            summary += `, Ï∂úÏó∞: ${mainCast}`;
        }
        
        return summary;
    }

    generateInsertSQL(movieData) {
        // SQL ÏïàÏ†ÑÌïú Î¨∏ÏûêÏó¥ Ïù¥Ïä§ÏºÄÏù¥ÌîÑ
        const escapeSQL = (str) => {
            if (str === null || str === undefined) return 'NULL';
            return `'${str.toString().replace(/'/g, "''")}'`;
        };

        const values = [
            escapeSQL(movieData.title),
            escapeSQL(movieData.title_english),
            escapeSQL(movieData.director),
            escapeSQL(movieData.cast),
            escapeSQL(movieData.genre),
            movieData.release_year || 'NULL',
            escapeSQL(movieData.release_date),
            movieData.running_time || 'NULL',
            escapeSQL(movieData.rating),
            escapeSQL(movieData.country),
            escapeSQL(movieData.production_company),
            escapeSQL(movieData.plot_summary),
            escapeSQL(movieData.poster_image),
            movieData.naver_rating || 'NULL',
            movieData.critic_score || 'NULL',
            movieData.audience_score || 'NULL',
            escapeSQL(movieData.data_source),
            escapeSQL(movieData.naver_link),
            escapeSQL(movieData.created_at),
            escapeSQL(movieData.updated_at)
        ];

        return `INSERT INTO movies (title, title_english, director, cast, genre, release_year, release_date, running_time, rating, country, production_company, plot_summary, poster_image, naver_rating, critic_score, audience_score, data_source, naver_link, created_at, updated_at) VALUES (${values.join(', ')});`;
    }

    async generateSQLFile() {
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const filename = `movie_inserts_${timestamp}.sql`;
        const filepath = path.join(__dirname, filename);

        let sqlContent = `-- ÏòÅÌôî Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ INSERT Î¨∏\n`;
        sqlContent += `-- ÏÉùÏÑ±ÏùºÏãú: ${new Date().toLocaleString('ko-KR')}\n`;
        sqlContent += `-- Ï¥ù ÏòÅÌôî Ïàò: ${this.sqlInserts.length}Í∞ú\n`;
        sqlContent += `-- Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§: ÎÑ§Ïù¥Î≤Ñ ÏòÅÌôî API\n\n`;
        
        sqlContent += `-- movies ÌÖåÏù¥Î∏îÏù¥ ÏóÜÎäî Í≤ΩÏö∞ ÏÉùÏÑ±\n`;
        sqlContent += this.getCreateTableSQL() + '\n\n';
        
        sqlContent += `-- ÏòÅÌôî Îç∞Ïù¥ÌÑ∞ INSERT\n`;
        sqlContent += `BEGIN;\n\n`;
        
        this.sqlInserts.forEach((insert, index) => {
            sqlContent += `-- ${index + 1}. ÏòÅÌôî Îç∞Ïù¥ÌÑ∞\n`;
            sqlContent += insert + '\n\n';
        });
        
        sqlContent += `COMMIT;\n\n`;
        sqlContent += `-- INSERT ÏôÑÎ£å. Ï¥ù ${this.sqlInserts.length}Í∞ú ÏòÅÌôî Ï∂îÍ∞ÄÎê®\n`;

        // ÌååÏùº Ï†ÄÏû•
        fs.writeFileSync(filepath, sqlContent, 'utf8');
        
        console.log(`\nüìÑ SQL ÌååÏùº ÏÉùÏÑ± ÏôÑÎ£å: ${filename}`);
        console.log(`üìç ÌååÏùº ÏúÑÏπò: ${filepath}`);
        console.log(`üìä Ï¥ù INSERTÎ¨∏: ${this.sqlInserts.length}Í∞ú`);
        
        // Í∞ÑÎã®Ìïú ÌÖçÏä§Ìä∏ ÌååÏùºÎèÑ ÏÉùÏÑ±
        const txtFilename = `movie_inserts_${timestamp}.txt`;
        const txtFilepath = path.join(__dirname, txtFilename);
        fs.writeFileSync(txtFilepath, sqlContent, 'utf8');
        
        console.log(`üìÑ TXT ÌååÏùºÎèÑ ÏÉùÏÑ±: ${txtFilename}`);
        
        return { sqlFile: filename, txtFile: txtFilename, insertCount: this.sqlInserts.length };
    }

    getCreateTableSQL() {
        return `CREATE TABLE IF NOT EXISTS movies (
    id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    title_english VARCHAR(255),
    director VARCHAR(255),
    cast TEXT,
    genre VARCHAR(100),
    release_year INTEGER,
    release_date DATE,
    running_time INTEGER,
    rating VARCHAR(20),
    country VARCHAR(100),
    production_company VARCHAR(255),
    plot_summary TEXT,
    poster_image TEXT,
    naver_rating DECIMAL(3,1),
    critic_score DECIMAL(3,1),
    audience_score DECIMAL(3,1),
    data_source VARCHAR(50) DEFAULT 'naver_api',
    naver_link TEXT,
    kofic_movie_code VARCHAR(20),
    box_office_rank INTEGER,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);`;
    }

    // API ÌÇ§Í∞Ä ÏóÜÏùÑ Îïå ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
    generateSampleInserts() {
        console.log('üìù ÏÉòÌîå ÏòÅÌôî Îç∞Ïù¥ÌÑ∞Î°ú INSERTÎ¨∏ ÏÉùÏÑ±');
        
        const sampleMovies = [
            {
                title: 'Í∏∞ÏÉùÏ∂©',
                title_english: 'Parasite',
                director: 'Î¥âÏ§ÄÌò∏',
                cast: 'ÏÜ°Í∞ïÌò∏, Ïù¥ÏÑ†Í∑†, Ï°∞Ïó¨Ï†ï, ÏµúÏö∞Ïãù, Î∞ïÏÜåÎã¥',
                genre: 'ÎìúÎùºÎßà',
                release_year: 2019,
                country: 'ÌïúÍµ≠',
                plot_summary: 'Í∏∞ÏÉùÏ∂© - Í∞êÎèÖ: Î¥âÏ§ÄÌò∏, Ï∂úÏó∞: ÏÜ°Í∞ïÌò∏, Ïù¥ÏÑ†Í∑†, Ï°∞Ïó¨Ï†ï',
                naver_rating: 8.5,
                audience_score: 8.5,
                data_source: 'sample_data'
            },
            {
                title: 'Ïñ¥Î≤§Ï†∏Ïä§: ÏóîÎìúÍ≤åÏûÑ',
                title_english: 'Avengers: Endgame',
                director: 'ÏïàÏÜåÎãà Î£®ÏÜå, Ï°∞ Î£®ÏÜå',
                cast: 'Î°úÎ≤ÑÌä∏ Îã§Ïö∞Îãà Ï£ºÎãàÏñ¥, ÌÅ¨Î¶¨Ïä§ ÏóêÎ∞òÏä§, ÎßàÌÅ¨ Îü¨ÌåîÎ°ú',
                genre: 'Ïï°ÏÖò',
                release_year: 2019,
                country: 'ÎØ∏Íµ≠',
                plot_summary: 'Ïñ¥Î≤§Ï†∏Ïä§: ÏóîÎìúÍ≤åÏûÑ - Í∞êÎèÖ: ÏïàÏÜåÎãà Î£®ÏÜå, Ï°∞ Î£®ÏÜå, Ï∂úÏó∞: Î°úÎ≤ÑÌä∏ Îã§Ïö∞Îãà Ï£ºÎãàÏñ¥, ÌÅ¨Î¶¨Ïä§ ÏóêÎ∞òÏä§, ÎßàÌÅ¨ Îü¨ÌåîÎ°ú',
                naver_rating: 9.0,
                audience_score: 9.0,
                data_source: 'sample_data'
            },
            {
                title: 'ÌÉëÍ±¥: Îß§Î≤ÑÎ¶≠',
                title_english: 'Top Gun: Maverick',
                director: 'Ï°∞ÏÖâ ÏΩîÏã†Ïä§ÌÇ§',
                cast: 'ÌÜ∞ ÌÅ¨Î£®Ï¶à, ÎßàÏùºÏ¶à ÌÖîÎü¨, Ï†úÎãàÌçº ÏΩîÎÑ¨Î¶¨',
                genre: 'Ïï°ÏÖò',
                release_year: 2022,
                country: 'ÎØ∏Íµ≠',
                plot_summary: 'ÌÉëÍ±¥: Îß§Î≤ÑÎ¶≠ - Í∞êÎèÖ: Ï°∞ÏÖâ ÏΩîÏã†Ïä§ÌÇ§, Ï∂úÏó∞: ÌÜ∞ ÌÅ¨Î£®Ï¶à, ÎßàÏùºÏ¶à ÌÖîÎü¨, Ï†úÎãàÌçº ÏΩîÎÑ¨Î¶¨',
                naver_rating: 8.7,
                audience_score: 8.7,
                data_source: 'sample_data'
            }
        ];

        sampleMovies.forEach(movie => {
            const insertSQL = this.generateInsertSQL({
                ...movie,
                title_english: movie.title_english,
                release_date: null,
                running_time: null,
                rating: null,
                production_company: null,
                poster_image: null,
                critic_score: null,
                naver_link: null,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            });
            
            this.sqlInserts.push(insertSQL);
        });

        this.results.successCount = sampleMovies.length;
        this.results.totalProcessed = sampleMovies.length;

        return this.generateSQLFile();
    }
}

// Ïã§Ìñâ Ìï®Ïàò
async function main() {
    console.log('üé¨ ÏòÅÌôî Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Î∞è SQL INSERTÎ¨∏ ÏÉùÏÑ±Í∏∞');
    console.log('='.repeat(50));
    
    const generator = new MovieInsertGenerator();
    
    try {
        const result = await generator.generateMovieInserts();
        
        if (result.success) {
            console.log('\nüéâ SQL ÌååÏùº ÏÉùÏÑ± ÏôÑÎ£å!');
            console.log('üìã ÏÇ¨Ïö© Î∞©Î≤ï:');
            console.log('1. ÏÉùÏÑ±Îêú .sql ÌååÏùºÏùÑ Supabase SQL ÏóêÎîîÌÑ∞Ïóê Î≥µÏÇ¨');
            console.log('2. ÎòêÎäî RailwayÏóêÏÑú ÏßÅÏ†ë Ïã§Ìñâ');
            console.log('3. ÎòêÎäî PostgreSQL ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú Ïã§Ìñâ');
        }
        
    } catch (error) {
        console.error('‚ùå Ïã§Ìñâ Ïò§Î•ò:', error);
    }
}

// Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
if (require.main === module) {
    main();
}

module.exports = MovieInsertGenerator;