// ÏïàÏ†ÑÌïú ÏòÅÌôî Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ SQL ÏÉùÏÑ±Í∏∞ (Foreign Key Ïò§Î•ò Î∞©ÏßÄ)
const fs = require('fs');
const path = require('path');

class SafeMovieSQLGenerator {
    constructor() {
        this.movies = [];
        this.reviews = [];
        this.movieIdMap = new Map(); // ÏòÅÌôî Ï†úÎ™© -> Ïã§Ï†ú ID Îß§Ìïë
        
        // Ï†ÑÎ¨∏Í∞Ä ÌèâÎ°†Í∞Ä Î™©Î°ù
        this.critics = {
            fixed: [
                { name: 'Ïù¥ÎèôÏßÑ', source: 'Ïî®ÎÑ§21' },
                { name: 'Î∞ïÌèâÏãù', source: 'Ï§ëÏïôÏùºÎ≥¥' }
            ],
            random: [
                { name: 'ÍπÄÌòúÎ¶¨', source: 'Ïî®ÎÑ§21' },
                { name: 'ÌóàÏßÄÏõÖ', source: 'KBS' },
                { name: 'Ìô©ÏßÑÎØ∏', source: 'Ï°∞ÏÑ†ÏùºÎ≥¥' },
                { name: 'Ïù¥Ïö©Ï≤†', source: 'Î¨∏ÌôîÏùºÎ≥¥' },
                { name: 'ÍπÄÏÑ±Ìõà', source: 'Ïî®ÎÑ§21' },
                { name: 'Ï†ïÏÑ±Ïùº', source: 'Ï§ëÏïôÏùºÎ≥¥' },
                { name: 'Ïú†ÏßÄÎÇò', source: 'ÌïúÍ≤®Î†à' },
                { name: 'Ïù¥ÌôîÏ†ï', source: 'Ïî®ÎÑ§21' },
                { name: 'ÎØºÏö©Ï§Ä', source: 'Ïä§Ìè¨Ï∏†Ï°∞ÏÑ†' },
                { name: 'ÍπÄÎ¥âÏÑù', source: 'ÌïúÍµ≠ÏùºÎ≥¥' },
                { name: 'Î∞∞ÎèôÎØ∏', source: 'Îß§ÏùºÍ≤ΩÏ†ú' },
                { name: 'Ïù¥ÏßÄÌòú', source: 'OSEN' },
                { name: 'Í∞ïÎ≥ëÏßÑ', source: 'Ìó§Îü¥ÎìúÍ≤ΩÏ†ú' },
                { name: 'ÎÇ®ÎèôÏ≤†', source: 'Ïä§Ìè¨Ï∏†ÏÑúÏö∏' },
                { name: 'ÍπÄÎèÑÌõà', source: 'ÎèôÏïÑÏùºÎ≥¥' }
            ]
        };
    }

    // ÏòÅÌôî Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
    generateMovies() {
        const moviesByYear = {
            2010: [
                { title: 'Ïù∏ÏÖâÏÖò', english: 'Inception', director: 'ÌÅ¨Î¶¨Ïä§ÌÜ†Ìçº ÎÜÄÎûÄ', cast: ['Î†àÏò§ÎÇòÎ•¥ÎèÑ ÎîîÏπ¥ÌîÑÎ¶¨Ïò§', 'ÎßàÎ¶¨Ïòπ ÏΩîÌã∞ÏïºÎ•¥'], genre: 'SF, Ïï°ÏÖò', rating: 8.8, country: 'ÎØ∏Íµ≠', runtime: 148 },
                { title: 'ÏïÑÏ†ÄÏî®', english: 'The Man from Nowhere', director: 'Ïù¥Ï†ïÎ≤î', cast: ['ÏõêÎπà', 'ÍπÄÏÉàÎ°†'], genre: 'Ïï°ÏÖò, Ïä§Î¶¥Îü¨', rating: 8.5, country: 'ÌïúÍµ≠', runtime: 119 },
                { title: 'ÌÜ†Ïù¥ Ïä§ÌÜ†Î¶¨ 3', english: 'Toy Story 3', director: 'Î¶¨ Ïñ∏ÌÅ¨Î¶¨Ïπò', cast: ['ÌÜ∞ ÌñâÌÅ¨Ïä§', 'ÌåÄ Ïï®Îü∞'], genre: 'Ïï†ÎãàÎ©îÏù¥ÏÖò', rating: 8.7, country: 'ÎØ∏Íµ≠', runtime: 103 }
            ],
            2011: [
                { title: 'ÏµúÏ¢ÖÎ≥ëÍ∏∞ Ìôú', english: 'War of the Arrows', director: 'ÍπÄÌïúÎØº', cast: ['Î∞ïÌï¥Ïùº', 'Î¨∏Ï±ÑÏõê'], genre: 'Ïï°ÏÖò, ÏÇ¨Í∑π', rating: 7.7, country: 'ÌïúÍµ≠', runtime: 122 }
            ],
            2012: [
                { title: 'ÎèÑÎëëÎì§', english: 'The Thieves', director: 'ÏµúÎèôÌõà', cast: ['ÍπÄÏú§ÏÑù', 'ÍπÄÌòúÏàò', 'Ïù¥Ï†ïÏû¨'], genre: 'Ïï°ÏÖò, Î≤îÏ£Ñ', rating: 7.8, country: 'ÌïúÍµ≠', runtime: 135 },
                { title: 'Í¥ëÌï¥, ÏôïÏù¥ Îêú ÎÇ®Ïûê', english: 'Masquerade', director: 'Ï∂îÏ∞ΩÎØº', cast: ['Ïù¥Î≥ëÌóå', 'Î•òÏäπÎ£°'], genre: 'ÎìúÎùºÎßà, ÏÇ¨Í∑π', rating: 8.4, country: 'ÌïúÍµ≠', runtime: 131 }
            ],
            2019: [
                { title: 'Í∏∞ÏÉùÏ∂©', english: 'Parasite', director: 'Î¥âÏ§ÄÌò∏', cast: ['ÏÜ°Í∞ïÌò∏', 'Ïù¥ÏÑ†Í∑†', 'Ï°∞Ïó¨Ï†ï'], genre: 'ÎìúÎùºÎßà, Ïä§Î¶¥Îü¨', rating: 8.9, country: 'ÌïúÍµ≠', runtime: 132 },
                { title: 'Ïñ¥Î≤§Ï†∏Ïä§: ÏóîÎìúÍ≤åÏûÑ', english: 'Avengers: Endgame', director: 'ÏïàÏÜåÎãà Î£®ÏÜå, Ï°∞ Î£®ÏÜå', cast: ['Î°úÎ≤ÑÌä∏ Îã§Ïö∞Îãà Ï£ºÎãàÏñ¥', 'ÌÅ¨Î¶¨Ïä§ ÏóêÎ∞òÏä§'], genre: 'Ïï°ÏÖò, SF', rating: 9.0, country: 'ÎØ∏Íµ≠', runtime: 181 }
            ],
            2024: [
                { title: 'ÏÑúÏö∏Ïùò Î¥Ñ', english: 'Seoul Spring', director: 'ÍπÄÏÑ±Ïàò', cast: ['Ìô©Ï†ïÎØº', 'Ï†ïÏö∞ÏÑ±'], genre: 'ÎìúÎùºÎßà', rating: 8.3, country: 'ÌïúÍµ≠', runtime: 141 }
            ]
        };

        let movieId = 1;
        for (const [year, movies] of Object.entries(moviesByYear)) {
            for (const movie of movies) {
                const movieData = {
                    id: movieId,
                    title: movie.title,
                    english_title: movie.english,
                    director: movie.director,
                    cast_members: movie.cast,
                    genre: movie.genre,
                    release_year: parseInt(year),
                    runtime_minutes: movie.runtime,
                    country: movie.country,
                    naver_rating: movie.rating,
                    description: `${movie.title} (${year}) - ${movie.genre}, Í∞êÎèÖ: ${movie.director}, Ï∂úÏó∞: ${movie.cast.join(', ')}`,
                    keywords: [movie.title, movie.english, movie.director, ...movie.cast, movie.genre].filter(Boolean)
                };
                
                this.movies.push(movieData);
                this.movieIdMap.set(movie.title, movieId);
                movieId++;
            }
        }
    }

    // Î¶¨Î∑∞ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± (ÏòÅÌôî ID Îß§Ìïë ÌôïÏù∏)
    generateReviews() {
        for (const movie of this.movies) {
            // Í≥†Ï†ï ÌèâÎ°†Í∞Ä 2Î™Ö
            const fixedCritics = this.critics.fixed;
            
            // ÎûúÎç§ ÌèâÎ°†Í∞Ä 2Î™Ö ÏÑ†ÌÉù
            const shuffledRandom = [...this.critics.random].sort(() => Math.random() - 0.5);
            const selectedRandom = shuffledRandom.slice(0, 2);
            
            // Ï†ÑÏ≤¥ ÌèâÎ°†Í∞Ä Î™©Î°ù
            const allCritics = [...fixedCritics, ...selectedRandom];
            
            // Í∞Å ÌèâÎ°†Í∞ÄÎ≥Ñ Î¶¨Î∑∞ ÏÉùÏÑ±
            for (const critic of allCritics) {
                const score = (Math.random() * 3 + 7).toFixed(1); // 7.0-10.0 ÏÇ¨Ïù¥
                const reviewDate = this.generateRandomDate();
                
                const review = {
                    movie_id: movie.id, // Ïã§Ï†ú ÏòÅÌôî ID ÏÇ¨Ïö©
                    critic_name: critic.name,
                    score: parseFloat(score),
                    review_text: this.generateReviewText(movie.title, critic.name),
                    review_source: critic.source,
                    review_date: reviewDate
                };
                
                this.reviews.push(review);
            }
        }
    }

    generateReviewText(movieTitle, criticName) {
        const templates = [
            `${movieTitle}Îäî Í¥ÄÍ∞ùÎì§Ïùò Í∏∞ÎåÄÎ•º Ï∂©Ï°±ÏãúÌÇ§Îäî ÎèôÏãúÏóê ÏÉàÎ°úÏö¥ Ïû¨ÎØ∏Î•º ÏÑ†ÏÇ¨ÌïúÎã§. Ï∂îÏ≤úÏûëÏù¥Îã§.`,
            `${movieTitle}ÏóêÏÑú Î≥¥Ïó¨Ï£ºÎäî Ïó∞Ï∂úÎ†•Í≥º Ïó∞Í∏∞Î†•Ïùò Ï°∞ÌôîÍ∞Ä Ïù∏ÏÉÅÍπäÎã§. ÏàòÏûëÏù¥Îã§.`,
            `ÏôÑÏÑ±ÎèÑ ÎÜíÏùÄ Ïó∞Ï∂úÍ≥º ÌÉÑÌÉÑÌïú Ïä§ÌÜ†Î¶¨Í∞Ä Ï°∞ÌôîÎ•º Ïù¥Î£¨ ${movieTitle}. Í∞ïÎ†• Ï∂îÏ≤úÌïúÎã§.`,
            `${movieTitle}ÏóêÏÑú Î≥¥Ïó¨Ï£ºÎäî Ï∫êÎ¶≠ÌÑ∞Îì§Ïùò Ïã¨Î¶¨ Î¨òÏÇ¨Í∞Ä ÌÉÅÏõîÌïòÎã§. Ïû•Î•¥Ï†Å ÏôÑÏÑ±ÎèÑÎèÑ ÎÜíÎã§.`,
            `${movieTitle}ÏóêÏÑú Î≥¥Ïó¨Ï£ºÎäî ÏòÅÌôîÏ†Å ÏôÑÏÑ±ÎèÑÍ∞Ä Îõ∞Ïñ¥ÎÇòÎã§. Í¥ÄÍ∞ùÎì§ÏóêÍ≤å ÎßåÏ°±ÏùÑ ÏÑ†ÏÇ¨Ìï† Í≤ÉÏù¥Îã§.`
        ];
        
        return templates[Math.floor(Math.random() * templates.length)];
    }

    generateRandomDate() {
        const start = new Date(2010, 0, 1);
        const end = new Date(2025, 6, 26);
        const randomTime = start.getTime() + Math.random() * (end.getTime() - start.getTime());
        return new Date(randomTime).toISOString().split('T')[0];
    }

    // SQL ÏÉùÏÑ±
    generateSQL() {
        this.generateMovies();
        this.generateReviews();
        
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        let sql = '';
        
        // Ìó§Îçî
        sql += `-- ÏïàÏ†ÑÌïú ÏòÅÌôî Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ INSERT Î¨∏ (Foreign Key Ïò§Î•ò Î∞©ÏßÄ)\n`;
        sql += `-- ÏÉùÏÑ±ÏùºÏãú: ${new Date().toLocaleString()}\n`;
        sql += `-- Ï¥ù ÏòÅÌôî Ïàò: ${this.movies.length}Í∞ú\n`;
        sql += `-- Ï¥ù Ï†ÑÎ¨∏Í∞Ä Î¶¨Î∑∞: ${this.reviews.length}Í∞ú\n`;
        sql += `-- ÌäπÏßï: ID ÏàúÏÑú Î≥¥Ïû•, Foreign Key Ï†úÏïΩÏ°∞Í±¥ Ï§ÄÏàò\n\n`;
        
        // Ìä∏ÎûúÏû≠ÏÖò ÏãúÏûë
        sql += `BEGIN;\n\n`;
        
        // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨
        sql += `-- Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ Î∞è ÏãúÌÄÄÏä§ Î¶¨ÏÖã\n`;
        sql += `TRUNCATE TABLE critic_reviews CASCADE;\n`;
        sql += `TRUNCATE TABLE movies RESTART IDENTITY CASCADE;\n`;
        sql += `ALTER SEQUENCE movies_id_seq RESTART WITH 1;\n`;
        sql += `ALTER SEQUENCE critic_reviews_id_seq RESTART WITH 1;\n\n`;
        
        // ÏòÅÌôî Îç∞Ïù¥ÌÑ∞ INSERT
        sql += `-- ==========================================\n`;
        sql += `-- ÏòÅÌôî Îç∞Ïù¥ÌÑ∞ INSERT (ID ÏàúÏÑú Î≥¥Ïû•)\n`;
        sql += `-- ==========================================\n\n`;
        
        for (const movie of this.movies) {
            const castArray = movie.cast_members.map(c => `"${c}"`).join(',');
            const keywordArray = movie.keywords.map(k => `"${k}"`).join(',');
            
            sql += `-- ${movie.id}. ${movie.title} (${movie.release_year}) - ${movie.country}\n`;
            sql += `INSERT INTO movies (title, english_title, director, cast_members, genre, release_year, runtime_minutes, country, naver_rating, description, keywords, poster_url, naver_movie_id) \n`;
            sql += `VALUES ('${movie.title}', '${movie.english_title || ''}', '${movie.director}', '{${castArray}}', '${movie.genre}', ${movie.release_year}, ${movie.runtime_minutes}, '${movie.country}', ${movie.naver_rating}, '${movie.description}', '{${keywordArray}}', NULL, NULL);\n\n`;
        }
        
        // Î¶¨Î∑∞ Îç∞Ïù¥ÌÑ∞ INSERT  
        sql += `-- ==========================================\n`;
        sql += `-- Ï†ÑÎ¨∏Í∞Ä Î¶¨Î∑∞ Îç∞Ïù¥ÌÑ∞ INSERT (ÏòÅÌôî ID Îß§Ìïë ÌôïÏù∏)\n`;
        sql += `-- ==========================================\n\n`;
        
        for (const review of this.reviews) {
            sql += `INSERT INTO critic_reviews (movie_id, critic_name, score, review_text, review_source, review_date) VALUES (${review.movie_id}, '${review.critic_name}', ${review.score}, '${review.review_text}', '${review.review_source}', '${review.review_date}');\n`;
        }
        
        sql += `\nCOMMIT;\n\n`;
        sql += `-- INSERT ÏôÑÎ£å\n`;
        sql += `-- üìä Ï¥ù ${this.movies.length}Í∞ú ÏòÅÌôî + ${this.reviews.length}Í∞ú Ï†ÑÎ¨∏Í∞Ä Î¶¨Î∑∞ Ï∂îÍ∞ÄÎê®\n`;
        sql += `-- ‚úÖ Foreign Key Ï†úÏïΩÏ°∞Í±¥ Ï§ÄÏàò ÌôïÏù∏Îê®\n`;
        
        return sql;
    }

    // ÌååÏùº Ï†ÄÏû•
    saveToFile() {
        const sql = this.generateSQL();
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const filename = `safe_movies_database_${timestamp}.sql`;
        const filepath = path.join(__dirname, filename);
        
        fs.writeFileSync(filepath, sql);
        
        console.log(`‚úÖ ÏïàÏ†ÑÌïú ÏòÅÌôî Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ SQL ÏÉùÏÑ± ÏôÑÎ£å: ${filename}`);
        console.log(`üìä ÏòÅÌôî: ${this.movies.length}Í∞ú`);
        console.log(`üìù Î¶¨Î∑∞: ${this.reviews.length}Í∞ú`);
        console.log(`üìÅ ÌååÏùº ÌÅ¨Í∏∞: ${Math.round(sql.length / 1024)}KB`);
        console.log(`\nüí° ÏÇ¨Ïö©Î≤ï:`);
        console.log(`1. Supabase SQL ÏóêÎîîÌÑ∞ÏóêÏÑú Ïã§Ìñâ`);
        console.log(`2. ÎòêÎäî ./open-sql.sh Î°ú VS CodeÏóêÏÑú Ïó¥Í∏∞`);
        
        return filename;
    }
}

// Ïã§Ìñâ
if (require.main === module) {
    const generator = new SafeMovieSQLGenerator();
    generator.saveToFile();
}

module.exports = SafeMovieSQLGenerator;